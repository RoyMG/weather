{"version":3,"sources":["services/transformWeather.jsx","constants/weathers.jsx","services/getUrlWeatherByCity.jsx","constants/api_url.jsx","components/WeatherLocation/location.jsx","components/WeatherLocation/WeatherData/weatherExtraInfo.jsx","components/WeatherLocation/WeatherData/weatherTemperature.jsx","components/WeatherLocation/WeatherData/index.jsx","components/WeatherLocation/index.jsx","components/locationList.jsx","components/ForecastItem/index.jsx","services/transformForecast.jsx","components/forecastExtended.jsx","App.js","serviceWorker.js","index.js"],"names":["transformWeather","weather_data","kelvin","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","getUrlWeatherByCity","city","Location","className","WeatherExtraInfo","icons","WeatherTemperature","icon","name","size","getWeatherIcon","WeatherData","data","WeatherLocation","props","handleUpdateClick","api_weather","state","fetch","then","resolve","json","newWeather","setState","this","onWeatherLocationClick","onClick","CircularProgress","Component","LocationList","cities","onSelecectedLocation","map","key","console","log","handleWeatherLocationClick","strToComponents","ForecastItem","weekDay","hour","transformForecast","list","filter","item","moment","unix","dt","utc","format","api_key","url_base_forecast","ForecastExtended","updateCity","url_forecast","forecastData","renderProgress","prevProps","prevState","forecast","renderForecastItemDays","App","handleSelectionLocation","AppBar","position","Toolbar","Typography","variant","color","xs","md","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81201264.chunk.js","sourcesContent":["import convert from \"convert-units\";\r\nimport {\r\n  CLOUD,\r\n  SUN,\r\n  RAIN,\r\n  SNOW,\r\n  THUNDER,\r\n  DRIZZLE\r\n} from \"./../constants/weathers\";\r\n\r\nconst getTemp = kelvin => {\r\n  return Number(\r\n    convert(kelvin)\r\n      .from(\"K\")\r\n      .to(\"C\")\r\n      .toFixed(0)\r\n  );\r\n};\r\nconst getWeatherState = weather => {\r\n  const { id } = weather;\r\n  if (id < 300) {\r\n    return THUNDER;\r\n  } else if (id < 400) {\r\n    return DRIZZLE;\r\n  } else if (id < 600) {\r\n    return RAIN;\r\n  } else if (id < 700) {\r\n    return SNOW;\r\n  } else if (id === 800) {\r\n    return SUN;\r\n  } else {\r\n    return CLOUD;\r\n  }\r\n};\r\n\r\nconst transformWeather = weather_data => {\r\n  const { humidity, temp } = weather_data.main;\r\n  const { speed } = weather_data.wind;\r\n  const weatherState = getWeatherState(weather_data.weather[0]);\r\n  const temperature = getTemp(temp);\r\n\r\n  const data = {\r\n    humidity,\r\n    temperature,\r\n    weatherState,\r\n    wind: `${speed} m/s`\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport default transformWeather;\r\n","export const CLOUD = \"cloud\";\r\n\r\nexport const SUN = \"sun\";\r\n\r\nexport const RAIN = \"rain\";\r\n\r\nexport const SNOW = \"snow\";\r\n\r\nexport const THUNDER = \"thunder\";\r\n\r\nexport const DRIZZLE = \"drizzle\";\r\n","import { url_base_weather, api_key } from \"./../constants/api_url\";\r\n\r\nconst getUrlWeatherByCity = city => {\r\n  return `${url_base_weather}?q=${city}&appid=${api_key}`;\r\n};\r\n\r\nexport default getUrlWeatherByCity;\r\n","export const api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\r\nexport const url_base_weather =\r\n  \"https://api.openweathermap.org/data/2.5/weather\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst Location = ({ city }) => {\r\n  return (\r\n    <div className=\"locationCont\">\r\n      <h1>{city}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nLocation.propTypes = {\r\n  city: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => {\r\n  return (\r\n    <div className=\"weatherExtraInfoCont\">\r\n      <span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\r\n      <span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherExtraInfo.propTypes = {\r\n  humidity: PropTypes.number.isRequired,\r\n  wind: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherExtraInfo;\r\n","import React from \"react\";\r\nimport WeatherIcons from \"react-weathericons\";\r\nimport {\r\n  CLOUD,\r\n  SUN,\r\n  RAIN,\r\n  SNOW,\r\n  THUNDER,\r\n  DRIZZLE\r\n} from \"./../../../constants/weathers\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst icons = {\r\n  [CLOUD]: \"cloud\",\r\n  [SUN]: \"day-sunny\",\r\n  [RAIN]: \"rain\",\r\n  [SNOW]: \"snow\",\r\n  [THUNDER]: \"day-thunderstorm\",\r\n  [DRIZZLE]: \"day-showers\"\r\n};\r\n\r\nconst getWeatherIcon = weatherState => {\r\n  const icon = icons[weatherState];\r\n  const sizeIcon = \"4x\";\r\n  if (icon) {\r\n    return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\r\n  } else {\r\n    return (\r\n      <WeatherIcons className=\"wicon\" name={\"day-sunny\"} size={sizeIcon} />\r\n    );\r\n  }\r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => {\r\n  return (\r\n    <div className=\"weatherTemperatureCont\">\r\n      {getWeatherIcon(weatherState)}\r\n      <span className=\"temperature\">{`${temperature}`}</span>\r\n      <span className=\"temperatureType\">{` C`}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherTemperature.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  weatherState: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherExtraInfo from \"./weatherExtraInfo\";\r\nimport WeatherTemperature from \"./weatherTemperature\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherData = ({\r\n  data: { temperature, weatherState, humidity, wind }\r\n}) => {\r\n  return (\r\n    <div className=\"weatherDataCont\">\r\n      <WeatherTemperature\r\n        temperature={temperature}\r\n        weatherState={weatherState}\r\n      />\r\n      <WeatherExtraInfo humidity={humidity} wind={wind} />\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherData.propTypes = {\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default WeatherData;\r\n","import React, { Component } from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport transformWeather from \"./../../services/transformWeather\";\r\nimport getUrlWeatherByCity from \"./../../services/getUrlWeatherByCity\";\r\nimport Location from \"./location\";\r\nimport WeatherData from \"./WeatherData\";\r\nimport \"./styles.css\";\r\n\r\nclass WeatherLocation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { city } = props;\r\n    this.state = {\r\n      city: city,\r\n      data: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleUpdateClick();\r\n  }\r\n  handleUpdateClick = () => {\r\n    const api_weather = getUrlWeatherByCity(this.state.city);\r\n    fetch(api_weather)\r\n      .then(resolve => {\r\n        return resolve.json();\r\n      })\r\n      .then(data => {\r\n        const newWeather = transformWeather(data);\r\n        this.setState({\r\n          data: newWeather\r\n        });\r\n      });\r\n  };\r\n  render() {\r\n    const { onWeatherLocationClick } = this.props;\r\n    const { city, data } = this.state;\r\n    return (\r\n      <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\r\n        <Location city={city} />\r\n        {data ? <WeatherData data={data} /> : <CircularProgress size={50} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func\r\n};\r\nexport default WeatherLocation;\r\n","import React from \"react\";\r\nimport WeatherLocation from \"./WeatherLocation\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst LocationList = ({ cities, onSelecectedLocation }) => {\r\n  const handleWeatherLocationClick = city => {\r\n    console.log(\"clicky\");\r\n    onSelecectedLocation(city);\r\n  };\r\n  const strToComponents = cities => {\r\n    return cities.map(city => (\r\n      <WeatherLocation\r\n        key={city}\r\n        city={city}\r\n        onWeatherLocationClick={() => handleWeatherLocationClick(city)}\r\n      />\r\n    ));\r\n  };\r\n  return <div className=\"locationList\">{strToComponents(cities)}</div>;\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelecectedLocation: PropTypes.func\r\n};\r\n\r\nexport default LocationList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherData from \"./../WeatherLocation/WeatherData\";\r\nimport \"./styles.css\";\r\n\r\nconst ForecastItem = ({ weekDay, hour, data }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>\r\n          <span className=\"weekDay\">{weekDay}</span> - {hour} hs\r\n        </h2>\r\n      </div>\r\n      <WeatherData data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nForecastItem.propTypes = {\r\n  weekDay: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default ForecastItem;\r\n","import moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport transformWeather from \"./transformWeather\";\r\n\r\nconst transformForecast = data =>\r\n  data.list\r\n    .filter(\r\n      item =>\r\n        moment\r\n          .unix(item.dt)\r\n          .utc()\r\n          .hour() === 6 ||\r\n        moment\r\n          .unix(item.dt)\r\n          .utc()\r\n          .hour() === 12 ||\r\n        moment\r\n          .unix(item.dt)\r\n          .utc()\r\n          .hour() === 18\r\n    )\r\n    .map(item => ({\r\n      weekDay: moment.unix(item.dt).format(\"ddd\"),\r\n      hour: moment.unix(item.dt).hour(),\r\n      data: transformWeather(item)\r\n    }));\r\n\r\nexport default transformForecast;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ForecastItem from \"./ForecastItem\";\r\nimport transformForecast from \"./../services/transformForecast\";\r\nimport \"./styles.css\";\r\n\r\n// const days = [\"Lunes\", \"Martes\", \"Miercoles\", \"Jueves\", \"Viernes\"];\r\n// const data = {\r\n//   temperature: 10,\r\n//   humidity: 10,\r\n//   weatherState: \"normal\",\r\n//   wind: \"normal\"\r\n// };\r\n\r\nconst api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\r\nconst url_base_forecast = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n\r\nclass ForecastExtended extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { forecastData: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateCity(this.props.city);\r\n  }\r\n\r\n  //WARNING! To be deprecated in React v17. Use new lifecycle static getDerivedStateFromProps instead.\r\n  // componentWillReceiveProps(nextProps) {\r\n  //   if (nextProps.city !== this.props.city) {\r\n  //     this.setState({ forecastData: null });\r\n  //     this.updateCity(nextProps.city);\r\n  //   }\r\n  // }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.city !== this.props.city) {\r\n      this.setState({ forecastData: null });\r\n      this.updateCity(this.props.city);\r\n    }\r\n  }\r\n\r\n  updateCity = city => {\r\n    const url_forecast = `${url_base_forecast}?q=${city}&appid=${api_key}`;\r\n    fetch(url_forecast)\r\n      .then(data => data.json())\r\n      .then(weather_data => {\r\n        console.log(weather_data);\r\n        const forecastData = transformForecast(weather_data);\r\n        console.log(forecastData);\r\n        this.setState({ forecastData });\r\n      });\r\n  };\r\n\r\n  renderForecastItemDays(forecastData) {\r\n    return forecastData.map(forecast => (\r\n      <ForecastItem\r\n        key={`${forecast.weekDay}${forecast.hour}`}\r\n        weekDay={forecast.weekDay}\r\n        hour={forecast.hour + 6}\r\n        data={forecast.data}\r\n      />\r\n    ));\r\n  }\r\n\r\n  renderProgress = () => {\r\n    return <h3>Cargando Pronostico extendido</h3>;\r\n  };\r\n  render() {\r\n    const { city } = this.props;\r\n    const { forecastData } = this.state;\r\n    return (\r\n      <div>\r\n        <h2 className=\"forecast-title\"> Pronostico Extendido para {city}</h2>\r\n        {forecastData\r\n          ? this.renderForecastItemDays(forecastData)\r\n          : this.renderProgress()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired\r\n};\r\nexport default ForecastExtended;\r\n","import React, { Component } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport LocationList from \"./components/locationList\";\nimport ForecastExtended from \"./components/forecastExtended\";\nimport { Grid, Col, Row } from \"react-flexbox-grid\";\nimport \"./App.css\";\n\nconst cities = [\n  \"Mexico City,mx\",\n  \"Puebla,mx\",\n  \"Nuevo Leon,mx\",\n  \"Guadalajara,mx\",\n  \"Washington,us\",\n  \"Denver,us\"\n];\n\nclass App extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = { city: \"Nueva Ciudad\" };\n  // }\n  state = {\n    city: null\n  };\n  handleSelectionLocation = city => {\n    this.setState({ city: city });\n    console.log(city);\n  };\n  render() {\n    const { city } = this.state;\n    return (\n      <Grid>\n        <Row>\n          <AppBar position=\"sticky\">\n            <Toolbar>\n              <Typography variant=\"h4\" color=\"inherit\">\n                Weather App\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </Row>\n        <Row>\n          <Col xs={12} md={6}>\n            <LocationList\n              cities={cities}\n              onSelecectedLocation={this.handleSelectionLocation}\n            />\n          </Col>\n          <Col xs={12} md={6}>\n            <Paper elevation={4}>\n              <div className=\"details\">\n                {city === null ? null : <ForecastExtended city={city} />}\n              </div>\n            </Paper>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}